[
    {
        "description": "Ledger is a popular command line accounting system that we use for all our bookkeeping. While we love the text-based nature of it, we wanted to build a simple GUI around it to get better visibility into our data. Next to the basic AppKit shell, this project uses lots of functional parsing and evaluation code.",
        "id": "ledger-mac-app",
        "new": false,
        "position": 18,
        "public": true,
        "title": "Ledger Mac App",
        "use_as_title_prefix": true
    },
    {
        "description": "From time to time we explore expiremental ideas. Some of these might turn out to be really useful, others might stay in the realm of interesting exercises that teach us to better understand Swift.",
        "id": "experiments",
        "new": false,
        "position": 17,
        "public": true,
        "title": "Experiments",
        "use_as_title_prefix": false
    },
    {
        "description": "Swift's standard library provides many basic data strutures, such as arrays, dictionaries, and sets. In this collection we explore both built-in and custom data structures.",
        "id": "data-structures",
        "new": false,
        "position": 16,
        "public": true,
        "title": "Data Structures",
        "use_as_title_prefix": false
    },
    {
        "description": "While Swift's collection protocols can be overwhelming at first, they provide a powerful infrastructure to extend collections' functionality and to implement entirely custom collection types. In this series we look at both aspects and learn about the underlying machinery in the process.",
        "id": "collection-protocols",
        "new": false,
        "position": 15,
        "public": true,
        "title": "Collection Protocols",
        "use_as_title_prefix": false
    },
    {
        "description": "In this collection we're joined by Brandon and Lisa from Kickstarter. Kickstarter has a unique code base that is consistently architected around functional and reactive programming concepts, combined with an emphasis on testing. We explore some of these aspects in four episodes recorded in spring 2017.",
        "id": "ios-at-kickstarter",
        "new": false,
        "position": 14,
        "public": true,
        "title": "iOS at Kickstarter",
        "use_as_title_prefix": false
    },
    {
        "description": "Xcode 9 gave us a new code editor, Swift refactoring capabilities, and many other improvements. We demonstrate some of these features that have helped us to be more productive in Xcode.",
        "id": "tooling",
        "new": false,
        "position": 13,
        "public": true,
        "title": "Tooling",
        "use_as_title_prefix": false
    },
    {
        "description": "We explore techniques for writing library code as well as factor out reusable components from specific code we've written before.",
        "id": "libraries",
        "new": false,
        "position": 12,
        "public": true,
        "title": "Libraries",
        "use_as_title_prefix": false
    },
    {
        "description": "Often we can make Cocoa APIs feel more at home in Swift by writing a tiny type-safe wrapper around them. In this collection we show examples of this pattern that clean up code throughout your project.",
        "id": "type-safe-api-wrappers",
        "new": false,
        "position": 11,
        "public": true,
        "title": "Type-Safe API Wrappers",
        "use_as_title_prefix": false
    },
    {
        "description": "This collection takes a framework-independent look at how to use Swift on the server. We use the Swift package manager and Docker to set up our development environment, add a simple HTTP server and build routing infrastructure on top. Lastly, we interface with PostgreSQL's C library for database access.",
        "id": "server-side-swift",
        "new": false,
        "position": 10,
        "public": true,
        "title": "Server-Side Swift",
        "use_as_title_prefix": false
    },
    {
        "description": "Incremental programming is a technique similar to reactive programming. However, the propagation of values through the reactive graph is done in such a way that you don't have to worry about duplicate observer calls and reactive glitches.",
        "id": "incremental-programming",
        "new": false,
        "position": 9,
        "public": true,
        "title": "Incremental Programming",
        "use_as_title_prefix": false
    },
    {
        "description": "This collection mainly focuses on understanding the machinery behind reactive programming libraries. We start out with a quick look at how reactive code compares to imperative UIKit code. Then we build a simple reactive library.",
        "id": "reactive-programming",
        "new": false,
        "position": 8,
        "public": true,
        "title": "Reactive Programming",
        "use_as_title_prefix": false
    },
    {
        "description": "Since table views are a foundational building block of iOS apps, improving the code around them really pays off. For example, we show how table view code can be made more generic and thus more reusable, and how to drive table view animations.",
        "id": "table-views",
        "new": false,
        "position": 7,
        "public": true,
        "title": "Table Views",
        "use_as_title_prefix": false
    },
    {
        "description": "With Swift we've seen a resurgence of functional programming patterns in the iOS community. This collection shows examples of functional programming.",
        "id": "functional-programming",
        "new": false,
        "position": 6,
        "public": true,
        "title": "Functional Programming",
        "use_as_title_prefix": false
    },
    {
        "description": "App architecture is a hot topic with new patterns emerging constantly. In this collection there are tips and experiments related to architectural decisions, ranging from small refactorings to global architecture patterns.",
        "id": "architecture",
        "new": false,
        "position": 5,
        "public": true,
        "title": "Architecture",
        "use_as_title_prefix": false
    },
    {
        "description": "Networking is part of almost every app, often with the help of large third-party libraries. In this collection we show how to build a custom lightweight and type-safe networking abstractions from scratch.",
        "id": "networking",
        "new": false,
        "position": 4,
        "public": true,
        "title": "Networking",
        "use_as_title_prefix": false
    },
    {
        "description": "Swift is a complex language. While much of the more advanced features and oddities stay out of sight in everyday iOS development, studying these aspects provides many learning opportunities. This collection covers some of the lesser known aspects of the Swift languague.",
        "id": "swift-the-language",
        "new": false,
        "position": 3,
        "public": true,
        "title": "Swift, the Language",
        "use_as_title_prefix": false
    },
    {
        "description": "We explore a variety of techniques to refactor very large view controllers. As an example, we look at the largest view controller from the open source Wikipedia for iOS app.",
        "id": "refactoring-large-view-controllers",
        "new": true,
        "position": 2,
        "public": true,
        "title": "Refactoring Large View Controllers",
        "use_as_title_prefix": true
    },
    {
        "description": "We build a reusable, declarative form library by refactoring the specific code of a settings screen. The library automatically keeps the data backing the form in sync with the form on screen.",
        "id": "building-a-form-library",
        "new": true,
        "position": 1,
        "public": true,
        "title": "Building a Form Library",
        "use_as_title_prefix": true
    },
    {
        "description": "We build a layout library that makes it easy to support a wide range of screen sizes and dynamic type. Similar to responsive design on the web, our library allows to specify different layout variants and automatically chooses the one that fits best.",
        "id": "building-a-layout-library",
        "new": true,
        "position": 0,
        "public": true,
        "title": "Building a Layout Library",
        "use_as_title_prefix": true
    }
]
